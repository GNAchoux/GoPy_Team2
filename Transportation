from datetime import datetime, timedelta
from typing import Dict, Tuple, List

class Transportation:
    BASE_FARE: Dict[str, Dict[str, int]] = {}
    ADDITIONAL_FARE: Dict[str, int] = {'adult': 100, 'teen': 80, 'child': 50, 'free': 0}

    def __init__(self, name: str, trans_type: str = 'regular') -> None:
        self.name = name
        self.trans_type = trans_type

    def get_base_fare(self, age_group: str) -> int:
        return self.BASE_FARE[self.trans_type][age_group]

    def __str__(self) -> str:
        return self.name

class Bus(Transportation):
    BASE_FARE = {
        'regular': {'adult': 1500, 'teen': 900, 'child': 550, 'free': 0},
        'circulation': {'adult': 1400, 'teen': 800, 'child': 500, 'free': 0},
        'express': {'adult': 3000, 'teen': 1700, 'child': 1500, 'free': 0},
        'night': {'adult': 2500, 'teen': 1600, 'child': 1400, 'free': 0},
        'village': {'adult': 1200, 'teen': 600, 'child': 400, 'free': 0}
    }

    def __init__(self, name: str, bus_type: str = 'regular') -> None:
        super().__init__(name, bus_type)

class Metro(Transportation):
    BASE_FARE = {
        'regular': {'adult': 1400, 'teen': 800, 'child': 500, 'free': 0},
        'dx_line': {'adult': 1400, 'teen': 800, 'child': 500, 'free': 0},
        'arex': {'adult': 1400, 'teen': 800, 'child': 500, 'free': 0}
    }

    def __init__(self, name: str, line_type: str = 'regular') -> None:
        super().__init__(name, line_type)

class TMoneyCard:
    def __init__(self, initial_balance: int = 0) -> None:
        self._balance = initial_balance

    @property
    def balance(self) -> int:
        return self._balance

    @balance.setter
    def balance(self, amount: int) -> None:
        if amount < 0:
            raise ValueError("Balance cannot be negative")
        self._balance = amount

    def charge(self, amount: int) -> None:
        self.balance += amount

    def deduct(self, amount: int) -> None:
        if self.balance < amount:
            raise ValueError("Insufficient balance")
        self.balance -= amount

class User:
    def __init__(self, user_id: int, age: int, t_money_card: TMoneyCard, points: int = 0, bike_pass: Dict[str, datetime] = None) -> None:
        self.user_id = user_id
        self.age = age
        self._t_money_card = t_money_card
        self.log: List[Tuple[Transportation, datetime, str, int, bool]] = []
        self.points = points
        self.transfer_count = 0  # 환승 카운트를 위한 변수 추가
        self.bike_pass = bike_pass if bike_pass is not None else {}  # 자전거 이용권
        self.bike_pass_expiry = self.calculate_bike_pass_expiry() if bike_pass else None

    def balance(self) -> int:
        return self._t_money_card.balance
    
    def calculate_bike_pass_expiry(self) -> datetime:
        if not self.bike_pass:
            return None
        pass_type, purchase_date = list(self.bike_pass.items())[0]
        if pass_type == 'daily_1hour':
            return purchase_date + timedelta(hours=1)
        elif pass_type == 'daily_2hour':
            return purchase_date + timedelta(hours=2)
        elif pass_type in ['7day_1hour', '7day_2hour']:
            return purchase_date + timedelta(days=7)
        elif pass_type in ['30day_1hour', '30day_2hour']:
            return purchase_date + timedelta(days=30)
        elif pass_type in ['180day_1hour', '180day_2hour']:
            return purchase_date + timedelta(days=180)
        elif pass_type in ['365day_1hour', '365day_2hour']:
            return purchase_date + timedelta(days=365)
        return None

    def update_bike_pass(self, new_pass: Dict[str, datetime]) -> None:
        self.bike_pass = new_pass
        self.bike_pass_expiry = self.calculate_bike_pass_expiry()

    def add_log(self, entry: Tuple[Transportation, datetime, str, int, bool]) -> None:
        self.log.append(entry)

    def get_age_group(self) -> str:
        if self.age >= 19 and self.age <= 64:
            return 'adult'
        elif self.age >= 13 and self.age <= 18:
            return 'teen'
        elif self.age >= 6 and self.age <= 12:
            return 'child'
        return 'free'

    def reset_transfer_count(self):
        self.transfer_count = 0

    def increment_transfer_count(self):
        self.transfer_count += 1
        if self.transfer_count > 4:
            self.reset_transfer_count()

    def get_formatted_log(self) -> str:
        formatted_log = []
        for entry in self.log:
            transportation, log_time, action, fare, is_transfer = entry
            formatted_log.append(f"{log_time.strftime('%Y-%m-%d %H:%M:%S')} - {action} - {transportation} - Fare: {fare} - Transfer: {'Yes' if is_transfer else 'No'}")
        return "\n".join(formatted_log)

    def __str__(self) -> str:
        return f"User {self.user_id} with balance {self._t_money_card.balance}, age {self.age}, points {self.points}, bike_pass {self.bike_pass}, bike_pass_expiry {self.bike_pass_expiry}"

class FareSystem:
    TRANSFER_TIME_LIMIT = timedelta(minutes=30)
    MAX_FREE_TRANSFERS = 4

    @staticmethod
    def is_transfer(user: User, current_time: datetime = None) -> bool:
        if current_time is None:
            current_time = datetime.now()

        if not user.log:
            return False
        
        last_action = user.log[-1][2]
        last_log_time = user.log[-1][1]
        
        return ((last_action == "alight") and (current_time - last_log_time <= FareSystem.TRANSFER_TIME_LIMIT)) or 1 <= user.transfer_count <= 4

    @staticmethod
    def process_ride(user: User, transportation: Transportation, card: TMoneyCard, action: str, distance: int = 0, current_time: datetime = None) -> int:
        if current_time is None:
            current_time = datetime.now()

        age_group = user.get_age_group()
        fare = 0
        is_transfer = FareSystem.is_transfer(user, current_time)

        if action == "board":
            if user.transfer_count == 4:
                is_transfer = False        
            if user.log and user.log[-1][2] == "board":
                last_log_time = user.log[-1][1]
                if current_time - last_log_time <= FareSystem.TRANSFER_TIME_LIMIT:
                    fare = transportation.get_base_fare(age_group)
                    user.reset_transfer_count()
                else:
                    last_transport = user.log[-1][0]
                    last_base_fare = last_transport.get_base_fare(age_group)
                    fare = transportation.get_base_fare(age_group) + last_base_fare * 2
                    user.reset_transfer_count()
            elif is_transfer:
                last_transport = user.log[-1][0]
                last_base_fare = last_transport.get_base_fare(age_group)
                current_base_fare = transportation.get_base_fare(age_group)
                fare = max(current_base_fare - last_base_fare, 0)
                user.increment_transfer_count()
            else:
                fare = transportation.get_base_fare(age_group)
                user.reset_transfer_count()

            # 자전거 반납 후 30분 이내 승차 시 포인트 부여
            if user.log and user.log[-1][2] == "return" and user.log[-1][0] == "bicycle":
                last_return_time = user.log[-1][1]
                if current_time - last_return_time <= timedelta(minutes=30):
                    user.points += 100

        elif action == "alight":
            if not is_transfer:
                if isinstance(transportation, Metro):
                    fare = FareSystem.calculate_distance_fare(age_group, distance, transportation)
                else:
                    fare = 0  # Bus는 거리 비례 요금 없음
            else:
                if isinstance(transportation, Bus) and transportation.trans_type == 'express' and distance > 30:
                    extra_distance = distance - 30
                    fare = (extra_distance // 5) * transportation.ADDITIONAL_FARE[age_group]
                if distance > 10:
                    extra_distance = distance - 10
                    fare = (extra_distance // 5) * transportation.ADDITIONAL_FARE[age_group]
                else:
                    fare = 0
                    
            if isinstance(transportation, Metro) and transportation.trans_type in ['dx_line', 'arex']:
                fare += distance * 70

            # 지하철/버스 하차 후 30분 이내 자전거 탑승 시 포인트 부여
            if user.log and user.log[-1][2] == "ride" and user.log[-1][0] == "bicycle":
                last_ride_time = user.log[-1][1]
                if current_time - last_ride_time <= timedelta(minutes=30):
                    user.points += 100

        else:
            raise ValueError("Invalid action. Action must be 'board' or 'alight'.")

        card.deduct(fare)
        user.add_log((transportation, current_time, action, fare, is_transfer))

        return fare

    @staticmethod
    def is_bicycle_transfer(user: User, current_time: datetime) -> bool:
        if not user.log:
            return False
        last_transportation, last_log_time, last_action, _, _ = user.log[-1]
        return last_action == 'alight' and (current_time - last_log_time <= timedelta(minutes=30))
    
    @staticmethod
    def process_bicycle_ride(user: User, card: TMoneyCard, action: str, ride_time: datetime, return_time: datetime = None) -> None:
        if action == "ride":
            if not user.bike_pass or ride_time > user.bike_pass_expiry:
                raise ValueError("Bike pass is either expired or not available.")
            user.add_log(("bicycle", ride_time, "ride", 0, FareSystem.is_bicycle_transfer(user, ride_time)))
            if FareSystem.is_bicycle_transfer(user, ride_time):
                user.points += 100

        elif action == "return":
            if not user.bike_pass:
                raise ValueError("No bike pass available.")
            if not return_time:
                raise ValueError("Return time must be provided for returning a bicycle.")
            pass_type = list(user.bike_pass.keys())[0]
            pass_duration = timedelta(hours=1) if '1hour' in pass_type else timedelta(hours=2)
            fare = 0
            if return_time - ride_time > pass_duration:
                extra_time = return_time - (ride_time + pass_duration)
                fare = (extra_time.total_seconds() // 300) * 200
                card.deduct(fare)
            user.add_log(("bicycle", return_time, "return", fare, False))

        else:
            raise ValueError("Invalid action. Action must be 'ride' or 'return'.")
        
